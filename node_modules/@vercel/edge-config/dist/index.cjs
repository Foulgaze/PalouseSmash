"use strict";Object.defineProperty(exports, "__esModule", {value: true});function p(e,r){return Object.prototype.hasOwnProperty.call(e,r)}function w(e,r){let s={};return r.forEach(f=>{s[f]=e[f]}),s}function a(e){if(typeof e!="string")throw new Error("@vercel/edge-config: Expected key to be a string")}function h(e){if(!Array.isArray(e)||e.some(r=>typeof r!="string"))throw new Error("@vercel/edge-config: Expected keys to be an array of string")}var o={UNEXPECTED:"@vercel/edge-config: Unexpected error",UNAUTHORIZED:"@vercel/edge-config: Unauthorized",NETWORK:"@vercel/edge-config: Network error",EDGE_CONFIG_NOT_FOUND:"@vercel/edge-config: Edge Config not found"};function l(e){return typeof structuredClone=="function"?structuredClone(e):e===void 0?e:JSON.parse(JSON.stringify(e))}function T(e){try{let r=new URL(e);if(r.host!=="edge-config.vercel.com"||r.protocol!=="https:"||!r.pathname.startsWith("/ecfg"))return null;let s=r.pathname.split("/")[1];if(!s)return null;let f=r.searchParams.get("token");return!f||f===""?null:{id:s,token:f}}catch (e2){return null}}async function u(e){if(typeof EdgeRuntime=="string")return null;let r=await Promise.resolve().then(() => require(/* webpackIgnore: true */["fs","promises"].join("/")));try{let s=await r.readFile(`/opt/edge-config/${e}.json`,"utf-8");return JSON.parse(s)}catch (e3){return null}}function m(e){if(!e)throw new Error("@vercel/edge-config: No connection string provided");let r=T(e);if(!r)throw new Error("@vercel/edge-config: Invalid connection string provided");let s=`https://edge-config.vercel.com/${r.id}`,f="1",c={Authorization:`Bearer ${r.token}`},t;return{async get(n){return typeof EdgeRuntime!="string"&&process.env.AWS_LAMBDA_FUNCTION_NAME&&(t===void 0&&(t=await u(r.id)),t)?(a(n),Promise.resolve(l(t.items[n]))):(a(n),fetch(`${s}/item/${n}?version=${f}`,{headers:c}).then(async i=>{if(i.status===401)throw new Error(o.UNAUTHORIZED);if(i.status===404){if(i.headers.has("x-edge-config-digest"))return;throw new Error(o.EDGE_CONFIG_NOT_FOUND)}if(i.ok)return i.json();throw new Error(o.UNEXPECTED)},()=>{throw new Error(o.NETWORK)}))},async has(n){return typeof EdgeRuntime!="string"&&process.env.AWS_LAMBDA_FUNCTION_NAME&&(t===void 0&&(t=await u(r.id)),t)?(a(n),Promise.resolve(p(t.items,n))):(a(n),fetch(`${s}/item/${n}?version=${f}`,{method:"HEAD",headers:c}).then(i=>{if(i.status===401)throw new Error(o.UNAUTHORIZED);if(i.status===404){if(i.headers.has("x-edge-config-digest"))return!1;throw new Error(o.EDGE_CONFIG_NOT_FOUND)}if(i.ok)return!0;throw new Error(o.UNEXPECTED)},()=>{throw new Error(o.NETWORK)}))},async getAll(n){if(typeof EdgeRuntime!="string"&&process.env.AWS_LAMBDA_FUNCTION_NAME&&(t===void 0&&(t=await u(r.id)),t))return h(n),Array.isArray(n)?Promise.resolve(l(w(t.items,n))):Promise.resolve(l(t.items));Array.isArray(n)&&h(n);let i=Array.isArray(n)?new URLSearchParams(n.map(d=>["key",d])).toString():null;return i===""?Promise.resolve({}):fetch(`${s}/items?version=${f}${i===null?"":`&${i}`}`,{headers:c}).then(async d=>{if(d.status===401)throw new Error(o.UNAUTHORIZED);if(d.status===404)throw new Error(o.EDGE_CONFIG_NOT_FOUND);if(d.ok)return d.json();throw new Error(o.UNEXPECTED)},()=>{throw new Error(o.NETWORK)})},async digest(){return typeof EdgeRuntime!="string"&&process.env.AWS_LAMBDA_FUNCTION_NAME&&(t===void 0&&(t=await u(r.id)),t)?Promise.resolve(t.digest):fetch(`${s}/digest?version=1`,{headers:c}).then(n=>{if(!n.ok)throw new Error(o.UNEXPECTED);return n.json()},()=>{throw new Error(o.NETWORK)})}}}var g;function E(){g||(g=m(process.env.EDGE_CONFIG))}var N=(...e)=>(E(),g.get(...e)),C= exports.getAll =(...e)=>(E(),g.getAll(...e)),y= exports.has =(...e)=>(E(),g.has(...e)),_= exports.digest =(...e)=>(E(),g.digest(...e));exports.createClient = m; exports.digest = _; exports.get = N; exports.getAll = C; exports.has = y; exports.parseConnectionString = T;
